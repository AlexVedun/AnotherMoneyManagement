<div id="main-div" class="col s12 m4 offset-m4 l4 offset-l4 xl4 offset-xl4">
    <div class="card grey lighten-2">
        <div class="card-content">
            <ul class="collapsible">
                <li>
                    <div class="collapsible-header"><i class="material-icons">account_balance</i>Кошельки и карты<br /> (всего: <!--ko text: mainSum()--><!--/ko--> грн.)</div>
                    <div class="collapsible-body">
                        <div class="row">
                            <ul class="collapsible" data-bind="foreach: sourcesList">
                                <li>
                                    <div class="collapsible-header"><i class="material-icons" data-bind="text: Icon"></i><!--ko text: Name--><!--/ko--> (<!--ko text: Money--><!--/ko--> грн.)</div>
                                    <div class="collapsible-body"><span><!--ko text: Description--><!--/ko--></span></div>
                                </li>
                            </ul>
                        </div>                        
                        <!--<div class="row">
                            <a href="#!add_source" class="waves-effect waves-light btn"><i class="material-icons left">add</i>Добавить</a>
                        </div>-->
                    </div>                    
                </li>
                <li>
                    <div class="collapsible-header"><i class="material-icons">swap_horiz</i>Транзакции</div>
                    <div class="collapsible-body">
                        <div class="row">
                            <ul class="collapsible" data-bind="foreach: transactionList">
                                <li>
                                    <div class="collapsible-header"><i class="material-icons" data-bind="text: Icon"></i><!--ko text: Name--><!--/ko--> (<!--ko text: Money--><!--/ko--> грн.)</div>
                                    <div class="collapsible-body"><span><!--ko text: Description--><!--/ko--></span></div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div class="fixed-action-btn">
        <a href="#!add_trans" class="btn-floating btn-large red waves-effect waves-light">
            <i class="large material-icons">add</i>
        </a>
        <!--<ul>
            <li><a class="btn-floating red"><i class="material-icons">insert_chart</i></a></li>
            <li><a class="btn-floating yellow darken-1"><i class="material-icons">format_quote</i></a></li>
            <li><a class="btn-floating green"><i class="material-icons">publish</i></a></li>
            <li><a class="btn-floating blue"><i class="material-icons">attach_file</i></a></li>
        </ul>-->
    </div>    
</div>
<script>
    let AMM_MainViewModel = {
        self: this,
        sourcesList: ko.observableArray([]),
        transactionList: ko.observableArray([]),
        mainSum: function () {
            let sum = 0;
            for (let i = 0; i < this.sourcesList().length; i++) {
                sum += this.sourcesList()[i].Money;
            }
            return sum;
        },
        //loginForm: {
        //    Login: ko.observable(""),
        //    Password: ko.observable("")
        //},
        //EditSource: function () {

        //},
        UpdateSourcesList: function () {
            AMM_ViewModel.showPreloader(true);
            $.ajax({
                url: "api/get-sources",
                type: 'GET'
            }).done(function (resp) {
                console.log(resp);
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    AMM_MainViewModel.sourcesList([]);
                    for (let item of resp.data) {
                        //if (item.Type.Name === "Кошелек" || item.Type.Name === "Карта") {
                        if (item.Type === WALLET || item.Type === CARD) {
                            switch (item.Type) {
                                case WALLET:
                                    item.Icon = "account_balance_wallet";
                                    break;
                                case CARD:
                                    item.Icon = "credit_card";
                                    break;
                                default:
                            }
                            AMM_MainViewModel.sourcesList.push(item);
                        }
                    }
                    //location.hash = "#!main";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },
        UpdateTransactionList: function () {
            AMM_ViewModel.showPreloader(true);
            $.ajax({
                url: "api/transactions/get-today",
                type: 'GET'
            }).done(function (resp) {
                console.log(resp);
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    console.log(resp.data);
                    //AMM_MainViewModel.transactionList([]);
                    //for (let item of resp.data) {
                    //    //if (item.Type.Name === "Кошелек" || item.Type.Name === "Карта") {
                    //    if (item.Type === WALLET || item.Type === CARD) {
                    //        switch (item.Type) {
                    //            case WALLET:
                    //                item.Icon = "account_balance_wallet";
                    //                break;
                    //            case CARD:
                    //                item.Icon = "credit_card";
                    //                break;
                    //            default:
                    //        }
                    //        AMM_MainViewModel.transactionList.push(item);
                    //    }
                    //}
                    //location.hash = "#!main";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        }
        //LoginClick: function () {
        //    AMM_ViewModel.showPreloader(true);
        //    let formData = ko.toJS(AMM_LoginViewModel.loginForm);
        //    console.log(formData);
        //    $.ajax({
        //        url: "api/login",
        //        data: formData,
        //        type: 'POST'
        //    }).done(function (resp) {
        //        console.log(resp);
        //        if (resp.error !== null && resp.error !== "") {
        //            AMM_ViewModel.showPreloader(false);
        //            alert(resp.error);
        //        }
        //        else {
        //            AMM_ViewModel.showPreloader(false);
        //            location.hash = "#!main";
        //        }
        //    }).fail(function (xhr, status, text) {
        //        AMM_ViewModel.showPreloader(false);
        //        alert("error: " + text);
        //    });
        //},

        //ShowRegistrationClick: function () {
        //    location.hash = "#!register";
        //}
    }
    ko.applyBindings(AMM_MainViewModel, document.getElementById("main-div"));

    $(document).ready(function () {
        $('.fixed-action-btn').floatingActionButton();
    });

    $(document).ready(function () {
        $('.collapsible').collapsible();
    });

    $(document).on("MainVisible", function () {
        AMM_MainViewModel.UpdateSourcesList();
        AMM_MainViewModel.UpdateTransactionList();
    });

        //AMM_MainViewModel.UpdateSourcesList();
</script>
