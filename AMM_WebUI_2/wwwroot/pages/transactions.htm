<div class="col s12 m12 l12 xl10 offset-xl1">
    <div class="card grey lighten-2" id="transactions-form">
        <div class="card-content">
            <span class="card-title">Транзакции</span>
            <div class="row">
                <form class="col s12 m12 l12 xl12">
                    <div class="row">
                        <h6>Поступление: <!--ko text: income--><!--/ko--> грн.</h6>
                    </div>
                    <div class="row">
                        <h6>Расходы: <!--ko text: waste--><!--/ko--> грн.</h6>
                    </div>
                    <div class="row">
                        <h6>Выберите промежуток времени</h6>
                    </div>
                    <div class="row">
                        <h6 class="active col s1 m1 l1 xl1">c</h6><input id="FromDate" type="text" class="datepicker col s11 m4 l4 xl4" data-bind="value: from" />
                        <h6 class="active col s1 m1 l1 xl1">по</h6><input id="ToDate" type="text" class="datepicker col s11 m4 l4 xl4" data-bind="value: to" />
                        <button class="col s12 m2 l2 xl2 waves-effect waves-light btn"
                                data-bind="click: FindClick">
                            Найти
                        </button>
                    </div>
                    <div class="row">
                        <ul class="collapsible">
                            <li>
                                <div class="collapsible-header">
                                    <span>По категориям</span>
                                </div>
                                <div class="collapsible-body">
                                    <ul class="collection" data-bind="foreach: categoryList">
                                        <li class="collection-item">
                                            <!--ko text: Name--><!--/ko-->: <!--ko text: Summ--><!--/ko--> грн.
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="row">
                        <ul class="collapsible" data-bind="foreach: transactionList">
                            <li>
                                <div class="collapsible-header">
                                    <i class="material-icons" data-bind="text: Icon"></i>
                                    <!--ko text: Date_--><!--/ko--> - <!--ko text: Time--><!--/ko--> - <!--ko text: Summ--><!--/ko--> грн.
                                </div>
                                <div class="collapsible-body">
                                    <div>
                                        <span>Из <!--ko text: From.Name--><!--/ko-->, расход <!--ko text: Credit--><!--/ko--> грн.</span>
                                    </div>
                                    <div>
                                        <span>В <!--ko text: To.Name--><!--/ko-->, приход <!--ko text: Debet--><!--/ko--> грн.</span>
                                    </div>
                                    <div>
                                        <!--ko text: Comment--><!--/ko-->
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>                    
                </form>
            </div>            
        </div>
    </div>
    <div class="fixed-action-btn">
        <a href="#!main" class="btn-floating btn-large red waves-effect waves-light">
            <i class="large material-icons">check</i>
        </a>        
    </div>
</div>
<script>
    let AMM_TransactionsViewModel = {
        // свойства
        self: this,        
        transactionList: ko.observableArray(),        
        income: ko.observable(0),
        waste: ko.observable(0),
        from: ko.observable(""),
        to: ko.observable(""),
        categoryList: ko.observableArray(),        
        // методы
        ClearForm: function () {
            this.from("");            
            this.to("");            
        },
        FindClick: function () {
            AMM_ViewModel.showPreloader(true);
            let fromPicker = M.Datepicker.getInstance(document.getElementById('FromDate'));
            let toPicker = M.Datepicker.getInstance(document.getElementById('ToDate'));
            let fromDate = moment(fromPicker.date).format('YYYY-MM-DD');
            let toDate = moment(toPicker.date).format('YYYY-MM-DD');
            $.ajax({
                url: "api/transactions/get-from-to",                
                data: { '_from': fromDate, '_to': toDate },
                type: 'GET'
            }).done(function (resp) {
                console.log(resp);
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    AMM_TransactionsViewModel.transactionList([]);
                    AMM_TransactionsViewModel.categoryList([]);
                    AMM_TransactionsViewModel.income(0);
                    AMM_TransactionsViewModel.waste(0);
                    let categories = {};
                    for (let item of resp.data) {                        
                        if (item.From.Type === INCOME) {
                            item.Icon = "add";
                            AMM_TransactionsViewModel.income(AMM_TransactionsViewModel.income() + item.Debet);
                        }
                        else if (item.To.Type === WASTE) {
                            item.Icon = "remove";
                            AMM_TransactionsViewModel.waste(AMM_TransactionsViewModel.waste() + item.Credit);
                            if (isNaN(categories[item.To.Name])) {
                                categories[item.To.Name] = 0;
                            }
                            categories[item.To.Name] += item.Credit;
                        }
                        else {
                            item.Icon = "import_export";
                        }
                        item.Time = moment(item.Date).format('kk:mm');
                        item.Date_ = moment(item.Date).format('DD.MM.YYYY');
                        if (item.Debet !== 0) {
                            item.Summ = item.Debet;
                        }
                        else {
                            item.Summ = item.Credit;
                        }                        
                        AMM_TransactionsViewModel.transactionList.push(item);                        
                    }
                    let categoryItem;
                    for (var cat in categories) {
                        categoryItem = {};
                        categoryItem.Name = cat;
                        categoryItem.Summ = categories[cat];
                        AMM_TransactionsViewModel.categoryList.push(categoryItem);
                    }                    
                    AMM_TransactionsViewModel.ClearForm();
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },        
        ReadyClick: function () {
            location.hash = "#!main";
        }
    }

    ko.applyBindings(AMM_TransactionsViewModel, document.getElementById("transactions-form"));

    $(document).ready(function () {
        var elems = document.querySelectorAll('.datepicker');
        var instances = M.Datepicker.init(elems, { format: 'dd.mm.yyyy' });
    });
        
    $(document).ready(function () {
        $('.collapsible').collapsible();
    });

    $(document).ready(function () {
        $('.fixed-action-btn').floatingActionButton();
    });

</script>
