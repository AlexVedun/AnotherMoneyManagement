<div class="col s12 m12 l12 xl10 offset-xl1" id="user-form">
    <div class="card grey lighten-2">
        <div class="card-content">
            <span class="card-title">Управление пользователем</span>
            <div class="row">
                <!--<form class="col s12 m8 l8 xl8">-->
                    <div class="col s12 m6 l6 xl6">
                        <div class="row">
                            <div class="input-field col s12">                                
                                <h6>Логин: <!--ko text: userForm.Login--><!--/ko--></h6>
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-field col s12">
                                <input value="" id="RegUserPassword" name="Password" type="text" class="validate" data-bind="value: userForm.Password">
                                <label class="active" for="RegUserPassword">Пароль</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-field col s12">
                                <input value="" id="RegUserSurname" name="Surname" type="text" class="validate" data-bind="value: userForm.Surname">
                                <label class="active" for="RegUserSurname">Фамилия</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-field col s12">
                                <input value="" id="RegUserName" name="Name" type="text" class="validate" data-bind="value: userForm.Name">
                                <label class="active" for="RegUserName">Имя</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-field col s12">
                                <input value="" id="RegUserPatronymic" name="Patronymic" type="text" class="validate" data-bind="value: userForm.Patronymic">
                                <label class="active" for="RegUserPatronymic">Отчество</label>
                            </div>
                        </div>                        
                    </div>
                    <div class="col s12 m6 l6 xl6">
                        <div class="row">
                            <button class="col s12 m10 offset-m1 l10 offset-l1 xl10 offset-xl1 waves-effect waves-light btn"
                                    data-bind="click: SaveChangesClick">
                                Сохранить
                            </button>
                        </div>                        
                        <div class="row">
                            <button class="col s12 m10 offset-m1 l10 offset-l1 xl10 offset-xl1 red waves-effect waves-light btn"
                                    data-bind="click: DeleteUserClick">
                                Удалить аккаунт
                            </button>
                        </div>
                    </div>
                <!--</form>-->                
            </div>
        </div>
    </div>
    <div class="fixed-action-btn">
        <button class="btn-floating btn-large red waves-effect waves-light"
                data-bind="click: ReadyClick">
            <i class="large material-icons">check</i>
        </button>
    </div>
</div>
<script>
    let AMM_UserViewModel = {
        // свойства
        self: this,
        //selectedTypeIndex: function () {
        //    return $('#AddSourceType').parent('li.selected').index();
        //},
        //selectedTypeText: function () {
        //    return $("#AddSourceType option:selected").eq(self.selectedTypeIndex()).text();
        //},
        //sources: ko.observableArray(),
        userForm: {
            Login: ko.observable(""),
            Password: ko.observable(""),
            Surname: ko.observable(""),
            Name: ko.observable(""),
            Patronymic: ko.observable("")
        },
        //types: ko.observableArray(),
        //isMoneyNeed: ko.computed(function () {
        //    console.log(self.selectedTypeText)
        //    return (self.selectedTypeText === "Кошелек" || self.selectedTypeText === "Карта");
        //}),
        //TypeNames: ko.observableArray(),
        //SelectedType: ko.observable(""),
        // методы
        ClearForm: function () {
            //this.addSourceForm.Description("");
            //this.addSourceForm.Money(0);
            //this.addSourceForm.Name("");
            //this.addSourceForm.TypeOfSource();
        },
        SaveChangesClick: function () {
            AMM_ViewModel.showPreloader(true);            
            let formData = ko.toJS(this.userForm);
            console.log(formData);
            $.ajax({
                url: "api/user/save",
                data: formData,
                type: 'POST'
            }).done(function (resp) {
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    M.toast({ html: 'Информация обновлена' });                    
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },
        DeleteUserClick: function () {
            //let deleteId = GetSelectedItemId("DeleteWalletCardList");
            $.ajax({
                url: "api/user/delete/",
                type: 'DELETE'
            }).done(function (resp) {
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    //AMM_AddSourceViewModel.GetWalletsCards();
                    //AMM_AddSourceViewModel.ClearForm();
                    //AMM_MainViewModel.UpdateSourcesList();
                    location.hash = "#!logout";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },
        GetUserInfo: function () {
            AMM_ViewModel.showPreloader(true);
            $.ajax({
                url: "api/user/get",
                type: 'GET'
            }).done(function (resp) {
                console.log(resp);
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);                    
                    AMM_UserViewModel.userForm.Login(resp.data.Login);
                    AMM_UserViewModel.userForm.Password(resp.data.Password);
                    AMM_UserViewModel.userForm.Name(resp.data.Name);
                    AMM_UserViewModel.userForm.Surname(resp.data.Surname);
                    AMM_UserViewModel.userForm.Patronymic(resp.data.Patronymic);
                    //AMM_AddSourceViewModel.sources([]);
                    //for (let item of resp.data) {
                    //    if (item.Type === WALLET || item.Type === CARD) {
                    //        switch (item.Type) {
                    //            case WALLET:
                    //                item.Icon = "account_balance_wallet";
                    //                break;
                    //            case CARD:
                    //                item.Icon = "credit_card";
                    //                break;
                    //            default:
                    //        }
                    //        AMM_AddSourceViewModel.sources.push(item);
                    //    }
                    //}
                    //$('#DeleteWalletCardList').formSelect();
                    //console.log(AMM_AddSourceViewModel.sources);
                    //location.hash = "#!main";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },
        ReadyClick: function () {
            location.hash = "#!main";
        }
    }

    ko.applyBindings(AMM_UserViewModel, document.getElementById("user-form"));

    $(document).on("UserVisible", function () {
        AMM_UserViewModel.GetUserInfo();
    });

    //$(document).ready(function () {
    //    $('#WalletCardList').collapsible();
    //});
</script>
