<div class="col s12 m8 offset-m2 l4 offset-l4 xl4 offset-xl4">
    <div class="card grey lighten-2">
        <div class="card-content">
            <span class="card-title">Создать транзакцию</span>
            <div class="row">
                <form id="add-transaction-form">
                    <div class="row">
                        <div class="input-field col s12">
                            <select id="FromSourceList" data-bind="foreach: fromSources">
                                <option data-bind="value: Id, text: Name"></option>
                            </select>
                            <label>Откуда</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <select id="ToSourceList" data-bind="foreach: toSources">
                                <option data-bind="value: Id, text: Name"></option>
                            </select>
                            <label>Куда</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <input value="" id="SummTrans" name="Summ" type="number" class="validate" data-bind="value: addTransactionForm.Summ">
                            <label class="active" for="SummTrans">Сумма</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <input value="" id="CommentTrans" name="Comment" type="text" class="validate" data-bind="value: addTransactionForm.Comment">
                            <label class="active" for="CommentTrans">Комментарий</label>
                        </div>
                    </div>
                    <div class="row">
                        <button class="col s12 m10 offset-m1 l10 offset-l1 xl10 offset-xl1 waves-effect waves-light btn"
                                data-bind="click: AddTransactionClick">
                            Добавить
                        </button>
                    </div>
                    <div class="row">
                        <button class="col s12 m10 offset-m1 l10 offset-l1 xl10 offset-xl1 waves-effect waves-light btn"
                                data-bind="click: CancelTransactionClick">
                            Отмена
                        </button>
                    </div>                    
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    let AMM_AddTransactionViewModel = {
        // свойства
        addTransactionForm: {
            Date: ko.observable(),
            Comment: ko.observable(""),
            From: ko.observable(0),
            To: ko.observable(0),
            Summ: ko.observable("")
        },
        fromSources: ko.observableArray(),
        toSources: ko.observableArray(),
        // методы
        ClearForm: function () {
            this.addTransactionForm.Comment("");
            this.addTransactionForm.Summ("");
            //for (var i in this.registerForm) {
            //    this.registerForm[i]("");
            //}
        },
        GetSourses: function () {
            AMM_ViewModel.showPreloader(true);
            $.ajax({
                url: "api/sources/get",
                type: 'GET'
            }).done(function (resp) {
                //console.log(resp);
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    AMM_AddTransactionViewModel.fromSources([]);
                    AMM_AddTransactionViewModel.toSources([]);
                    for (let item of resp.data) {
                        if (item.Type === INCOME) {
                            AMM_AddTransactionViewModel.fromSources.push(item);
                        }
                        else if (item.Type === WASTE) {
                            AMM_AddTransactionViewModel.toSources.push(item);
                        }
                        else {
                            item.Name = item.Name + " (" + item.Money + " грн.)";
                            AMM_AddTransactionViewModel.fromSources.push(item);
                            AMM_AddTransactionViewModel.toSources.push(item);
                        }
                        //if (item.Type === INCOME || item.Type === WASTE) {
                        //    switch (item.Type) {
                        //        case INCOME:
                        //            item.Icon = "attach_money";
                        //            break;
                        //        case WASTE:
                        //            item.Icon = "shopping_cart";
                        //            break;
                        //        default:
                        //    }
                        //    AMM_ManageIncomeWasteViewModel.sources.push(item);
                        //}
                    }
                    $('#FromSourceList').formSelect();
                    $('#ToSourceList').formSelect();
                    //console.log(AMM_ManageIncomeWasteViewModel.sources);
                    //location.hash = "#!main";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },
        AddTransactionClick: function () {
            AMM_ViewModel.showPreloader(true);
            //let currentDate = new Date();
            //let currentDate2 = currentDate.toString();
            //let currentDate3 = Date.parse(currentDate2);
            //let currentDate4 = Date(currentDate3);
            let currentDate = moment();
            //console.log(currentDate.toString());
            console.log(currentDate.format());
            //console.log(currentDate4.toJSON());
            //this.addTransactionForm.Date(currentDate.toJSON());
            this.addTransactionForm.Date(currentDate.format());
            this.addTransactionForm.From(GetSelectedItemId("FromSourceList"));
            this.addTransactionForm.To(GetSelectedItemId("ToSourceList"));
            let formData = ko.toJS(this.addTransactionForm);
            $.ajax({
                url: "api/transactions/add",
                data: formData,
                type: 'POST'
            }).done(function (resp) {
                if (resp.error !== null && resp.error !== "") {
                    AMM_ViewModel.showPreloader(false);
                    alert(resp.error);
                }
                else {
                    AMM_ViewModel.showPreloader(false);
                    AMM_AddTransactionViewModel.ClearForm();
                    location.hash = "#!main";
                }
            }).fail(function (xhr, status, text) {
                AMM_ViewModel.showPreloader(false);
                alert("error: " + text);
            });
        },

        CancelTransactionClick: function () {
            location.hash = "#!main";
        }
    }
    ko.applyBindings(AMM_AddTransactionViewModel, document.getElementById("add-transaction-form"));

    $(document).on("AddTransactionVisible", function () {
        AMM_AddTransactionViewModel.GetSourses();
    });
</script>
